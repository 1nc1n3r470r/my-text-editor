diff --git a/example/lib/home_page.dart b/example/lib/home_page.dart
index 969668a..d282e14 100644
--- a/example/lib/home_page.dart
+++ b/example/lib/home_page.dart
@@ -1,8 +1,10 @@
 import 'dart:async';
 import 'dart:convert';
 import 'dart:io';
+import 'dart:js_util';
 import 'dart:math';

+import 'dart:developer' as developer;
 import 'package:appflowy_editor/appflowy_editor.dart';
 import 'package:example/pages/customize_theme_for_editor.dart';
 import 'package:example/pages/editor.dart';
@@ -13,18 +15,13 @@ import 'package:flutter/services.dart';
 import 'package:universal_html/html.dart' as html;

 enum ExportFileType {
-  documentJson,
   markdown,
   html,
-  delta,
 }

 extension on ExportFileType {
   String get extension {
     switch (this) {
-      case ExportFileType.documentJson:
-      case ExportFileType.delta:
-        return 'json';
       case ExportFileType.markdown:
         return 'md';
       case ExportFileType.html:
@@ -33,6 +30,33 @@ extension on ExportFileType {
   }
 }

+class Note {
+  String title;
+  EditorState body;
+
+  Note(this.title, this.body);
+
+  Map toJson() {
+    return {"title": title, "body": body.document.toJson()};
+  }
+
+  String getTitle() {
+    return title;
+  }
+
+  void setTitle(String title) {
+    this.title = title;
+  }
+
+  EditorState getBody() {
+    return body;
+  }
+
+  void setBody(EditorState body) {
+    this.body = body;
+  }
+}
+
 class HomePage extends StatefulWidget {
   const HomePage({Key? key}) : super(key: key);

@@ -42,21 +66,24 @@ class HomePage extends StatefulWidget {

 class _HomePageState extends State<HomePage> {
   final _scaffoldKey = GlobalKey<ScaffoldState>();
-
+  var notes = <Note>[
+    Note(
+        "First default Note",
+        EditorState.blank(
+            // withInitialText: false,
+            )),
+  ];
+  var currNote = 0;
   late WidgetBuilder _widgetBuilder;
-  late EditorState _editorState;
-  late Future<String> _jsonString;

   @override
   void initState() {
     super.initState();

-    _jsonString = rootBundle.loadString('assets/example.json');
-
     _widgetBuilder = (context) => Editor(
-          jsonString: _jsonString,
+          editorState: notes[currNote].getBody(),
           onEditorStateChange: (editorState) {
-            _editorState = editorState;
+            notes[currNote].setBody(editorState);
           },
         );
   }
@@ -64,14 +91,10 @@ class _HomePageState extends State<HomePage> {
   @override
   void reassemble() {
     super.reassemble();
-
     _widgetBuilder = (context) => Editor(
-          jsonString: _jsonString,
+          editorState: notes[currNote].getBody(),
           onEditorStateChange: (editorState) {
-            _editorState = editorState;
-            _jsonString = Future.value(
-              jsonEncode(_editorState.document.toJson()),
-            );
+            notes[currNote].setBody(editorState);
           },
         );
   }
@@ -97,49 +120,58 @@ class _HomePageState extends State<HomePage> {
   }

   Widget _buildDrawer(BuildContext context) {
+    var children = [
+      DrawerHeader(
+        padding: EdgeInsets.zero,
+        margin: EdgeInsets.zero,
+        child: Image.asset(
+          'assets/images/icon.png',
+          fit: BoxFit.fill,
+        ),
+      ),
+
+      // saved notes
+      _buildSeparator(context, 'Your Saved Notes'),
+    ];
+    developer.log("Notes length: ${notes.length}");
+    for (int i = 0; i < notes.length; i++) {
+      developer.log("Building ListTile No. $i");
+      children.add(
+        _buildListTile(context, notes[i].getTitle(), () {
+          developer.log("switching from $currNote to $i");
+          developer.log("${notes[currNote].getBody()}");
+          _switchFile(
+            notes[currNote].getBody(),
+            ExportFileType.markdown,
+            currNote,
+            i,
+          );
+        }),
+      );
+    }
+
+    children.addAll([
+      // Encoder Demo
+      _buildSeparator(context, 'Export Your Note'),
+      _buildListTile(context, 'Export to Markdown', () {
+        _exportFile(notes[currNote].getBody(), ExportFileType.markdown);
+      }),
+
+      _buildListTile(context, 'Export to HTML', () {
+        _exportFile(notes[currNote].getBody(), ExportFileType.html);
+      }),
+
+      // Decoder Demo
+      _buildSeparator(context, 'Import a New Note'),
+      _buildListTile(context, 'Import From Markdown', () {
+        _importFile(ExportFileType.markdown);
+      }),
+    ]);
+
     return Drawer(
       child: ListView(
         padding: EdgeInsets.zero,
-        children: [
-          DrawerHeader(
-            padding: EdgeInsets.zero,
-            margin: EdgeInsets.zero,
-            child: Image.asset(
-              'assets/images/icon.png',
-              fit: BoxFit.fill,
-            ),
-          ),
-
-          // saved notes
-          _buildSeparator(context, 'Your Saved Notes'),
-          /*_buildListTile(context, 'Export To JSON', () {
-            _exportFile(_editorState, ExportFileType.documentJson);
-          }),
-          _buildListTile(context, 'Export to Markdown', () {
-            _exportFile(_editorState, ExportFileType.markdown);
-          }),*/
-
-          // Encoder Demo
-          _buildSeparator(context, 'Export Your Note'),
-          _buildListTile(context, 'Export To JSON', () {
-            _exportFile(_editorState, ExportFileType.documentJson);
-          }),
-          _buildListTile(context, 'Export to Markdown', () {
-            _exportFile(_editorState, ExportFileType.markdown);
-          }),
-
-          // Decoder Demo
-          _buildSeparator(context, 'Import a New Note'),
-          _buildListTile(context, 'Import From Document JSON', () {
-            _importFile(ExportFileType.documentJson);
-          }),
-          _buildListTile(context, 'Import From Markdown', () {
-            _importFile(ExportFileType.markdown);
-          }),
-          _buildListTile(context, 'Import From Quill Delta', () {
-            _importFile(ExportFileType.delta);
-          }),
-        ],
+        children: children,
       ),
     );
   }
@@ -184,52 +216,38 @@ class _HomePageState extends State<HomePage> {
     );
   }

-  Future<void> _loadEditor(
+  void _loadEditor(
     BuildContext context,
-    Future<String> jsonString,
-  ) async {
-    final completer = Completer<void>();
-    _jsonString = jsonString;
+  ) {
     setState(
       () {
         _widgetBuilder = (context) => Editor(
-              jsonString: _jsonString,
+              editorState: notes[currNote].getBody(),
               onEditorStateChange: (editorState) {
-                _editorState = editorState;
+                notes[currNote].setBody(editorState);
               },
             );
       },
     );
-    WidgetsBinding.instance.addPostFrameCallback((timeStamp) {
-      completer.complete();
-    });
-    return completer.future;
   }

   void _addNote() {
-    final jsonString = Future<String>.value(
-              jsonEncode(
-                EditorState.blank(withInitialText: true).document.toJson(),
-              ).toString(),
-            );
-            _loadEditor(context, jsonString);
+    setState(() {
+      notes.add(Note("Note No. ${currNote++}", EditorState.blank()));
+      developer.log(jsonEncode(notes));
+    });
+    //_switchFile(
+    //    _editorState, ExportFileType.markdown, currNote, notes.length - 1,);
   }

-  void _exportFile(
-    EditorState editorState,
-    ExportFileType fileType,
-  ) async {
+  void _exportFile(EditorState editorState, ExportFileType fileType) async {
     var result = '';

     switch (fileType) {
-      case ExportFileType.documentJson:
-        result = jsonEncode(editorState.document.toJson());
-        break;
       case ExportFileType.markdown:
         result = documentToMarkdown(editorState.document);
         break;
       case ExportFileType.html:
-      case ExportFileType.delta:
         throw UnimplementedError();
     }

@@ -257,6 +275,20 @@ class _HomePageState extends State<HomePage> {
     }
   }

+  void _switchFile(
+      EditorState oldEditorState, ExportFileType fileType, int old, int neww) {
+    setState(() {
+      //save old body
+      notes[old].setBody(oldEditorState);
+      // switch to neww
+      currNote = neww;
+      developer
+          .log("Old State: ${jsonEncode(oldEditorState.document.toJson())}");
+      developer.log("Old: $old");
+      developer.log("neww: $neww");
+    });
+  }
+
   void _importFile(ExportFileType fileType) async {
     final result = await FilePicker.platform.pickFiles(
       allowMultiple: false,
@@ -271,32 +303,25 @@ class _HomePageState extends State<HomePage> {
       }
       plainText = await File(path).readAsString();
     } else {
-      final bytes = result?.files.first.bytes;
+      final bytes = result?.files.single.bytes;
       if (bytes == null) {
         return;
       }
       plainText = const Utf8Decoder().convert(bytes);
     }
-
-    var jsonString = '';
     switch (fileType) {
-      case ExportFileType.documentJson:
-        jsonString = plainText;
-        break;
       case ExportFileType.markdown:
-        jsonString = jsonEncode(markdownToDocument(plainText).toJson());
-        break;
-      case ExportFileType.delta:
-        final delta = Delta.fromJson(jsonDecode(plainText));
-        final document = quillDeltaEncoder.convert(delta);
-        jsonString = jsonEncode(document.toJson());
+        notes.add(Note(
+          "Imported document \"called ${result?.files.single.name}\"",
+          EditorState(document: markdownToDocument(plainText)),
+        ));
         break;
       case ExportFileType.html:
         throw UnimplementedError();
     }

     if (mounted) {
-      _loadEditor(context, Future<String>.value(jsonString));
+      _loadEditor(context);
     }
   }
 }
diff --git a/example/lib/pages/editor.dart b/example/lib/pages/editor.dart
index 497aa34..154203f 100644
--- a/example/lib/pages/editor.dart
+++ b/example/lib/pages/editor.dart
@@ -6,158 +6,140 @@ import 'package:flutter/material.dart';
 class Editor extends StatelessWidget {
   const Editor({
     super.key,
-    required this.jsonString,
+    required this.editorState,
     required this.onEditorStateChange,
     this.editorStyle,
   });

-  final Future<String> jsonString;
+  final EditorState editorState;
   final EditorStyle? editorStyle;
   final void Function(EditorState editorState) onEditorStateChange;

   @override
   Widget build(BuildContext context) {
-    return FutureBuilder<String>(
-      future: jsonString,
-      builder: (context, snapshot) {
-        if (snapshot.hasData &&
-            snapshot.connectionState == ConnectionState.done) {
-          final editorState = EditorState(
-            document: Document.fromJson(
-              Map<String, Object>.from(
-                json.decode(snapshot.data!),
-              ),
+    editorState.logConfiguration
+      ..handler = debugPrint
+      ..level = LogLevel.off;
+    editorState.transactionStream.listen((event) {
+      if (event.$1 == TransactionTime.after) {
+        onEditorStateChange(editorState);
+      }
+    });
+    final editorScrollController = EditorScrollController(
+      editorState: editorState,
+      shrinkWrap: false,
+    );
+    if (PlatformExtension.isMobile) {
+      return Column(
+        children: [
+          Expanded(
+            child: _buildMobileEditor(
+              context,
+              editorState,
+              editorScrollController,
             ),
-          );
-          editorState.logConfiguration
-            ..handler = debugPrint
-            ..level = LogLevel.off;
-          editorState.transactionStream.listen((event) {
-            if (event.$1 == TransactionTime.after) {
-              onEditorStateChange(editorState);
-            }
-          });
-          final editorScrollController = EditorScrollController(
+          ),
+          MobileToolbar(
             editorState: editorState,
-            shrinkWrap: false,
-          );
-          if (PlatformExtension.isDesktopOrWeb) {
-            return FloatingToolbar(
-              items: [
-                paragraphItem,
-                ...headingItems,
-                ...markdownFormatItems,
-                quoteItem,
-                bulletedListItem,
-                numberedListItem,
-                linkItem,
-                buildTextColorItem(),
-                buildHighlightColorItem(),
-                ...textDirectionItems,
-                ...alignmentItems,
-              ],
-              editorState: editorState,
-              editorScrollController: editorScrollController,
-              child: _buildDesktopEditor(
-                context,
-                editorState,
-                editorScrollController,
-              ),
-            );
-          } else if (PlatformExtension.isMobile) {
-            return Column(
-              children: [
-                Expanded(
-                  child: _buildMobileEditor(
-                    context,
-                    editorState,
-                    editorScrollController,
-                  ),
-                ),
-                MobileToolbar(
-                  editorState: editorState,
-                  toolbarItems: [
-                    textDecorationMobileToolbarItem,
-                    buildTextAndBackgroundColorMobileToolbarItem(),
-                    headingMobileToolbarItem,
-                    todoListMobileToolbarItem,
-                    listMobileToolbarItem,
-                    linkMobileToolbarItem,
-                    quoteMobileToolbarItem,
-                    dividerMobileToolbarItem,
-                    codeMobileToolbarItem,
-                  ],
-                ),
-              ],
-            );
-          }
-        }
-        return const Center(
-          child: CircularProgressIndicator(),
-        );
-      },
-    );
+            toolbarItems: [
+              textDecorationMobileToolbarItem,
+              buildTextAndBackgroundColorMobileToolbarItem(),
+              headingMobileToolbarItem,
+              todoListMobileToolbarItem,
+              listMobileToolbarItem,
+              linkMobileToolbarItem,
+              quoteMobileToolbarItem,
+              dividerMobileToolbarItem,
+              codeMobileToolbarItem,
+            ],
+          ),
+        ],
+      );
+    } else {
+      return FloatingToolbar(
+        items: [
+          paragraphItem,
+          ...headingItems,
+          ...markdownFormatItems,
+          quoteItem,
+          bulletedListItem,
+          numberedListItem,
+          linkItem,
+          buildTextColorItem(),
+          buildHighlightColorItem(),
+          ...textDirectionItems,
+          ...alignmentItems,
+        ],
+        editorState: editorState,
+        editorScrollController: editorScrollController,
+        child: _buildDesktopEditor(
+          context,
+          editorState,
+          editorScrollController,
+        ),
+      );
+    }
   }
+}

-  Widget _buildMobileEditor(
-    BuildContext context,
-    EditorState editorState,
-    EditorScrollController? editorScrollController,
-  ) {
-    return AppFlowyEditor(
-      editorStyle: const EditorStyle.mobile(),
-      editorState: editorState,
-      editorScrollController: editorScrollController,
-    );
-  }
+Widget _buildMobileEditor(
+  BuildContext context,
+  EditorState editorState,
+  EditorScrollController? editorScrollController,
+) {
+  return AppFlowyEditor(
+    editorStyle: const EditorStyle.mobile(),
+    editorState: editorState,
+    editorScrollController: editorScrollController,
+  );
+}

-  Widget _buildDesktopEditor(
-    BuildContext context,
-    EditorState editorState,
-    EditorScrollController? editorScrollController,
-  ) {
-    final customBlockComponentBuilders = {
-      ...standardBlockComponentBuilderMap,
-      ImageBlockKeys.type: ImageBlockComponentBuilder(
-        showMenu: true,
-        menuBuilder: (node, _) {
-          return const Positioned(
-            right: 10,
-            child: Text('Sample Menu'),
-          );
-        },
-      )
-    };
-    return AppFlowyEditor(
-      editorState: editorState,
-      shrinkWrap: true,
-      editorScrollController: editorScrollController,
-      blockComponentBuilders: customBlockComponentBuilders,
-      commandShortcutEvents: [
-        customToggleHighlightCommand(
-          style: ToggleColorsStyle(
-            highlightColor: Theme.of(context).highlightColor,
-          ),
+Widget _buildDesktopEditor(
+  BuildContext context,
+  EditorState editorState,
+  EditorScrollController? editorScrollController,
+) {
+  final customBlockComponentBuilders = {
+    ...standardBlockComponentBuilderMap,
+    ImageBlockKeys.type: ImageBlockComponentBuilder(
+      showMenu: true,
+      menuBuilder: (node, _) {
+        return const Positioned(
+          right: 10,
+          child: Text('Sample Menu'),
+        );
+      },
+    )
+  };
+  return AppFlowyEditor(
+    editorState: editorState,
+    shrinkWrap: true,
+    editorScrollController: editorScrollController,
+    blockComponentBuilders: customBlockComponentBuilders,
+    commandShortcutEvents: [
+      customToggleHighlightCommand(
+        style: ToggleColorsStyle(
+          highlightColor: Theme.of(context).highlightColor,
         ),
-        ...[
-          ...standardCommandShortcutEvents
-            ..removeWhere(
-              (el) => el == toggleHighlightCommand,
-            ),
-        ],
-        ...findAndReplaceCommands(
-          context: context,
-          localizations: FindReplaceLocalizations(
-            find: 'Find',
-            previousMatch: 'Previous match',
-            nextMatch: 'Next match',
-            close: 'Close',
-            replace: 'Replace',
-            replaceAll: 'Replace all',
+      ),
+      ...[
+        ...standardCommandShortcutEvents
+          ..removeWhere(
+            (el) => el == toggleHighlightCommand,
           ),
-        ),
       ],
-      characterShortcutEvents: standardCharacterShortcutEvents,
-    );
-  }
+      ...findAndReplaceCommands(
+        context: context,
+        localizations: FindReplaceLocalizations(
+          find: 'Find',
+          previousMatch: 'Previous match',
+          nextMatch: 'Next match',
+          close: 'Close',
+          replace: 'Replace',
+          replaceAll: 'Replace all',
+        ),
+      ),
+    ],
+    characterShortcutEvents: standardCharacterShortcutEvents,
+  );
 }
